name: AoC22 CI
on: [push]
jobs:
  build_and_test:
    name: Build and Test On ${{ matrix.os }} using ${{ matrix.cxx }}
    strategy:
      matrix:
        os:  [ubuntu-latest, windows-latest]
        cxx: [clang++, g++, cl.exe]
        exclude:
         - os: windows-latest
           cxx: g++
         - os: ubuntu-latest 
           cxx: cl.exe
#        include:
#         - os: macos-latest
#           cxx: clang++
    runs-on: ${{ matrix.os }}
    env:
        CXX: ${{ matrix.cxx }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          submodules: true
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Install LLVM 
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: ${{ matrix.os == 'macos-latest' && '15.0' || '16.0' }}  
      - name: Print VS version
        run: vswhere
        if: ${{ matrix.cxx == 'cl.exe'}}
      - name: Install MSVC 
        #run: choco install visualstudio2022enterprise --package-parameters "update --productId Microsoft.VisualStudio.Product.Enterprise"
        run: cinst visualstudio2022enterprise
        if: ${{ matrix.cxx == 'cl.exe'}}
          
      - name: Print VS version post
        run: vswhere
        if: ${{ matrix.cxx == 'cl.exe'}}
      - name: Setup MS developer prompt
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.cxx == 'cl.exe'}}
      - name: CMake version
        run:  cmake --version
      - name: Clang format version
        run:  clang-format --version
      - name: Configure
        run:  cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DENABLE_TESTS=ON -DENABLE_CLANG_TIDY=${{ matrix.cxx == 'cl.exe' && 'OFF' || 'ON' }}
      - name: Build Tests
        run:  cmake --build build --config Release
      - name: Run Tests
        run:  ctest --test-dir build --output-on-failure
      - name: Check Formating
        run:  cmake --build build --config Release --target clang-format-check
  test_coverage:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with: 
            submodules: true
        - name: Install LCOV
          run:  sudo apt-get install lcov
        - name: Configure
          run:  cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DENABLE_TESTS=ON -DENABLE_COVERAGE_REPORT=ON
        - name: Build Tests
          run:  cmake --build build
        - name: Run Tests
          run:  ctest --test-dir build --output-on-failure
        - name: Generate Coverage Report
          run:  cmake --build build --target generate-coverage-report
        - name: Upload coverage reports to Codecov
          uses: codecov/codecov-action@v3
          env:
            CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}