name: AoC CI

on: [push]
        
env:
  NINJA_VER: 1.11.1
  GCC_VER: 14
  MVSC_VER: 14.40
  CMAKE_VER: 3.27.3
  LLVM_VER_UBUNTU: 19
  LLVM_VER_WIN: 19.1.3

jobs:
  build_and_test:
    name: Build and Test On ${{ matrix.os }} using ${{ matrix.cxx }}
    strategy:
      matrix:
        os:  [ubuntu-24.04, windows-latest]
        cxx: [clang++, g++, cl.exe]
        exclude:
         - os: windows-latest
           cxx: g++
         - os: ubuntu-24.04 
           cxx: cl.exe
        
    runs-on: ${{ matrix.os }}
    env:
      CXX: ${{ matrix.cxx }}
      CC: ${{ matrix.cxx == 'clang++' && 'clang' || matrix.cxx == 'g++' && 'gcc' || 'cl.exe' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          submodules: true
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: ${{env.CMAKE_VER}}
      - name: CMake version
        run: cmake --version
      - name: Set up GCC
        run: |
          sudo apt-get update
          sudo apt-get install g++-$GCC_VER
          sudo update-alternatives \
            --install /usr/bin/g++ g++ /usr/bin/g++-$GCC_VER 50
        if: ${{ matrix.cxx == 'g++'}}
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
        with:
          version: ${{env.NINJA_VER}}
      - name: Install LLVM Ubuntu
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh $LLVM_VER_UBUNTU all
          sudo update-alternatives --remove-all clang++
          sudo update-alternatives --remove-all clang
          sudo update-alternatives --remove-all clang-tidy
          sudo update-alternatives --remove-all clang-format
          sudo update-alternatives \
            --install /usr/bin/clang clang /usr/bin/clang-$LLVM_VER_UBUNTU 50 \
            --slave /usr/bin/clang++ clang++ /usr/bin/clang++-$LLVM_VER_UBUNTU \
            --slave /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-$LLVM_VER_UBUNTU \
            --slave /usr/bin/clang-format clang-format /usr/bin/clang-format-$LLVM_VER_UBUNTU
        if: ${{ matrix.os == 'ubuntu-latest'}}
      - name: Install LLVM Windows
        run: choco install llvm --version=$env:LLVM_VER_WIN --allow-downgrade
        if: ${{ matrix.os == 'windows-latest'}}
      - name: Update MSVC 
        run: |
          Invoke-WebRequest -URI https://aka.ms/vs/17/release/vs_buildtools.exe -OutFile vs_buildtools.exe
          $process = Start-Process -FilePath vs_buildtools.exe -ArgumentList "--installPath", "$pwd\VSBuildTools", "--passive", "--wait","--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64"  -Wait -PassThru
          Write-Output $process.ExitCode 
        if: ${{ matrix.cxx == 'cl.exe'}}
      - name: Setup MSVC 
        uses: TheMrMilchmann/setup-msvc-dev@v2
        with:
          arch: x64
          toolset: ${{env.MVSC_VER}}
        if: ${{ matrix.cxx == 'cl.exe'}}
      - name: Configure
        run:  cmake -S . -B build -G Ninja 
              -DCMAKE_BUILD_TYPE=Release 
              -DENABLE_TESTS=ON 
              -DENABLE_CLANG_TIDY=${{ matrix.cxx == 'cl.exe' && 'OFF' || 'ON' }} 
              -DENABLE_MSVC_ANALYSIS=${{ matrix.cxx == 'cl.exe' && 'ON' || 'OFF' }} 
              -DENABLE_FUZZ_TESTS=${{ matrix.cxx == 'clang++' && matrix.os == 'ubuntu-latest' && 'OFF' || 'OFF' }}
              -DENABLE_COVERAGE_REPORT=${{ matrix.cxx == 'clang++' && matrix.os == 'ubuntu-latest' && 'ON' || 'OFF' }}
      - name: Build Tests
        run:  cmake --build build --config Release
      - name: Run Tests
        run:  ctest --test-dir build --output-on-failure
      - name: Generate Coverage Report
        run:  cmake --build build --target generate-coverage-report
        if:  ${{ matrix.cxx == 'clang++' && matrix.os == 'ubuntu-latest'}}
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        if:  ${{ matrix.cxx == 'clang++' && matrix.os == 'ubuntu-latest'}}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Check Formating
        run:  cmake --build build --config Release --target clang-format-check